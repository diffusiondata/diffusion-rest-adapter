<?xml version="1.0"?>
<ruleset name="Diffusion PMD ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>
        PMD ruleset for REST adapter.
    </description>

    <rule ref="category/java/bestpractices.xml">
        <exclude name="AbstractClassWithoutAbstractMethod"/>
        <exclude name="AccessorClassGeneration"/>
        <exclude name="AccessorMethodGeneration"/>
        <!-- We do this a lot. Trust ourselves to get it right. -->
        <exclude name="ArrayIsStoredDirectly"/>
        <!-- Our custom checkstyle rules handle this for slf4j. -->
        <exclude name="GuardLogStatement"/>
        <exclude name="JUnit4TestShouldUseTestAnnotation"/>
        <exclude name="MethodReturnsInternalArray"/>
        <exclude name="PreserveStackTrace"/>
        <!-- Caught by Checkstyle -->
        <exclude name="SystemPrintln"/>
        <!-- Doesn't understand heap pollution. -->
        <exclude name="UseVarargs"/>
        <!-- Checkstyle catches unused imports, and we don't want additional
             workarounds for things only referenced by javadoc. -->
        <exclude name="UnusedImports"/>
        <!-- Broken. -->
        <exclude name="UnusedPrivateMethod"/>
    </rule>

    <rule ref="category/java/codestyle.xml">
        <exclude name="AbstractNaming"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="AvoidFinalLocalVariable"/> <!-- Insane. -->
        <exclude name="AvoidPrefixingMethodParameters"/>
        <exclude name="BooleanGetMethodName"/>
        <exclude name="CallSuperInConstructor"/>
        <exclude name="ClassNamingConventions"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="ConfusingTernary"/>
        <exclude name="DefaultPackage"/>
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
        <exclude name="FieldDeclarationsShouldBeAtStartOfClass"/>
        <!-- Caught by checkstyle. Can't be customised for loop variables. -->
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="LongVariable"/>
        <exclude name="MethodArgumentCouldBeFinal"/>
        <!-- If this ignores declarations with side-effects, it would
             be useful. But it doesn't, so it's broken advice. -->
        <exclude name="PrematureDeclaration"/>
        <exclude name="OnlyOneReturn"/>
        <exclude name="ShortClassName"/>
        <exclude name="ShortMethodName"/>
        <exclude name="ShortVariable"/>
        <exclude name="TooManyStaticImports"/>
        <!-- Style should be driven by checkstyle -->
        <exclude name="UnnecessaryFullyQualifiedName"/>
    </rule>

    <rule ref="category/java/design.xml">
        <!-- Spotbugs deals with some of the exclusions. -->
        <exclude name="AvoidCatchingGenericException"/>
        <exclude name="AvoidDeeplyNestedIfStmts"/>
        <exclude name="AvoidRethrowingException"/>
        <exclude name="AvoidThrowingNullPointerException"/>
        <exclude name="AvoidThrowingRawExceptionTypes"/>
        <exclude name="CouplingBetweenObjects"/>
        <exclude name="CyclomaticComplexity"/>
        <exclude name="DataClass"/>
        <exclude name="ExceptionAsFlowControl"/>
        <exclude name="ExcessiveClassLength"/>
        <exclude name="ExcessiveImports"/>
        <exclude name="ExcessiveMethodLength"/>
        <exclude name="ExcessiveParameterList"/>
        <exclude name="ExcessivePublicCount"/>
        <exclude name="GodClass"/>
        <exclude name="LawOfDemeter"/>
        <exclude name="LoosePackageCoupling"/>
        <exclude name="NcssCount"/>
        <exclude name="NPathComplexity"/>
        <exclude name="SignatureDeclareThrowsException"/>
        <exclude name="TooManyFields"/>
        <exclude name="TooManyMethods"/>
        <exclude name="UseObjectForClearerAPI"/>
        <exclude name="UseUtilityClass"/>
    </rule>

    <!-- All documentation rules ignored in favour of checkstyle. -->
    <!-- <rule ref="category/java/documentation.xml"> -->

    <rule ref="category/java/errorprone.xml">
        <exclude name="AvoidCatchingNPE"/>
        <exclude name="AvoidCatchingThrowable"/>
        <exclude name="AvoidDuplicateLiterals"/>
        <exclude name="AvoidFieldNameMatchingMethodName"/>
        <exclude name="AvoidFieldNameMatchingTypeName"/>
        <exclude name="AvoidLiteralsInIfCondition"/>
        <exclude name="BeanMembersShouldSerialize"/>
        <!-- Checks AutoCloseable => far too many false positives. -->
        <exclude name="CloseResource"/>
        <exclude name="CompareObjectsWithEquals"/>
        <exclude name="DataflowAnomalyAnalysis"/>
        <!-- Checksyle adequately constrains switch statements. -->
        <exclude name="MissingBreakInSwitch"/>
        <exclude name="NullAssignment"/>
        <!-- Rule is dumb and matches all getInstance(...) methods. -->
        <exclude name="SingletonClassReturningNewInstance"/>
        <exclude name="UseProperClassLoader"/>
        <exclude name="UseLocaleWithCaseConversions"/>
    </rule>

    <rule ref="category/java/multithreading.xml">
        <exclude name="AvoidSynchronizedAtMethodLevel"/>
        <exclude name="AvoidUsingVolatile"/>
        <exclude name="DoNotUseThreads"/>
        <exclude name="NonThreadSafeSingleton"/>
        <!-- Stupid matches for non-concurrent code. -->
        <exclude name="UseConcurrentHashMap"/>
    </rule>

    <!-- Many of the excluded performance rules are naive and easily
         optimised away by javac or the JIT. E.g.
         ConsecutiveAppendsShouldReuse, RedundantFieldInitializer,
         SimplifyStartsWith. -->
    <rule ref="category/java/performance.xml">
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <exclude name="AvoidUsingShortType"/>
        <exclude name="ConsecutiveAppendsShouldReuse"/>
        <exclude name="ConsecutiveLiteralAppends"/>
        <!-- Bad advice. -->
        <exclude name="IntegerInstantiation"/>
        <exclude name="LongInstantiation"/>
        <exclude name="RedundantFieldInitializer"/>
        <exclude name="SimplifyStartsWith"/>
        <exclude name="TooFewBranchesForASwitchStatement"/>
    </rule>
</ruleset>
